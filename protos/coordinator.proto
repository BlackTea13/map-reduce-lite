syntax = "proto3";
package coordinator;

message JobsRequest {}

message JobsResponse {
  // This can be changed, but this is 
  // the simplest/fastest solution.
  repeated string data = 1;
}

message StatusRequest {}

message StatusResponse {
  repeated string data = 1;
}

// Worker asking to join workforce.
message WorkerJoinRequest {
  uint32 port = 1;
}
message WorkerJoinResponse {
  int32 worker_id = 1;
}

// Worker asking to leave workforce.
message WorkerLeaveRequest {
  int32 worker_id = 1;
}
message WorkerLeaveResponse {}

// Worker request for work.
message WorkerTaskRequest {
  int32 worker_id = 1;
}
message WorkerTaskResponse {
  // Queued I guess?
  bool success = 1;
}

message AddJobRequest {
  string input_files = 1;
  string output_files = 2;
  string workload = 3;
  uint32 timeout = 4;
  repeated string aux = 5;
}

message AddJobResponse {
  bool success = 1;
}

message WorkerDoneRequest {
  int32 worker_id = 1;
}

message WorkerDoneResponse {
  bool success = 1;
}

message AcquireLockRequest {
  string object_key = 1;
}

message AcquireLockResponse {
  bool lock = 1;
}

message InvalidateLockRequest {
  string object_key = 1;
}

message InvalidateLockResponse {}

service Coordinator {
  rpc Jobs (JobsRequest) returns (JobsResponse);
  rpc Status (StatusRequest) returns (StatusResponse);
  rpc WorkerJoin (WorkerJoinRequest) returns (WorkerJoinResponse);
  rpc WorkerLeave (WorkerLeaveRequest) returns (WorkerLeaveResponse);
  rpc WorkerTask (WorkerTaskRequest) returns (WorkerTaskResponse);
  rpc AddJob (AddJobRequest) returns (AddJobResponse);
  rpc WorkerDone (WorkerDoneRequest) returns (WorkerDoneResponse);
  rpc AcquireLock (AcquireLockRequest) returns (AcquireLockResponse);
  rpc InvalidateLock (InvalidateLockRequest) returns (InvalidateLockResponse);
}

